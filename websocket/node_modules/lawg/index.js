// Generated by CoffeeScript 1.8.0
(function() {
  var debug, path, util,
    __slice = [].slice;

  util = require('util');

  path = require("path");


  /*
  paras: what to log, if an object then it will be deeply inspected
   */

  debug = process.env['NODE_DEBUG'] ? true : false;

  module.exports = function() {
    var e, file, locLine, m, msg, offsets, para, paras, ts, _ref;
    paras = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    ts = (function() {
      var dateTs, i, pad, sms, sts, _i;
      dateTs = new Date();
      sts = dateTs + "";
      sms = '' + dateTs.getMilliseconds();
      pad = 3 - sms.length;
      for (i = _i = 0; 0 <= pad ? _i < pad : _i > pad; i = 0 <= pad ? ++_i : --_i) {
        sms = '0' + sms;
      }
      return sts.slice(4, 24) + "." + sms + sts.slice(24, 33);
    })();
    msg = ((function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = paras.length; _i < _len; _i++) {
        para = paras[_i];
        _results.push(typeof para === "object" ? util.inspect(para, {
          depth: 10
        }) : "" + para);
      }
      return _results;
    })()).join('');
    if (debug) {
      e = new Error("");
      locLine = e.stack.split("\n")[2];
      m = /\((.*?):(\d+:\d+)\)/.exec(locLine);
      if (!m) {
        m = /at (.*?):(\d+:\d+)/.exec(locLine);
      }
      if (m) {
        _ref = [m[1], m[2]], file = _ref[0], offsets = _ref[1];
        return console.log("[" + ts + "](" + (path.relative(process.cwd(), file)) + ":" + offsets + ") " + msg + " ");
      } else {
        return console.log("[" + ts + "](" + e.stack + ") " + msg + " ");
      }
    } else {
      return console.log("[" + ts + "] " + msg + " ");
    }
  };

}).call(this);

//# sourceMappingURL=index.js.map
